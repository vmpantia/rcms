@using Microsoft.AspNetCore.Components.Authorization
@using RCMS.Shared
@using RCMS.Shared.Extensions
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Class="ml-2">Review Center Management System</MudText>
        <MudSpacer />
        <AuthorizeView>
            <MudAvatar Color="Color.Info">@context.User.GetClaimValue(Constant.CLAIM_TYPE_INITIALS)</MudAvatar>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Elevation="1" @bind-Open="@_isDrawerOpen" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject] public NavigationManager NavigationManager { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool _isDrawerOpen = false;

    protected override async Task OnInitializedAsync()
    {
        // Get authentication state based on the cascading parameter
        var state = await AuthenticationState;

        // Redirect user to log in when it's not authenticated
        if ((state.User.Identity?.IsAuthenticated ?? false) == false)
            NavigationManager.NavigateTo("/login");
    }

    private void ToggleDrawer() => _isDrawerOpen = !_isDrawerOpen;
}