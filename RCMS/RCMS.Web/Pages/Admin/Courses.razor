@page "/courses"
@using RCMS.Shared.Models.Courses
@using RCMS.Web.Interfaces.Services
@using RCMS.Web.Components.Tables
@using RCMS.Web.Components.Texts
@using RCMS.Web.Components.Chips

<PageContent Title="Courses" Description="List of courses stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_courses"
                          IsLoading="_isLoading">
                    <Columns>
                        <DataGridPropertyColumn TData="CourseDto" Title="Name" Property="cc => cc.Name"/>
                        <DataGridPropertyColumn TData="CourseDto" Title="Description" Property="cc => cc.Description"/>
                        <DataGridPropertyColumn TData="CourseDto" Title="Category" Property="cc => cc.Category.Name"/>
                        <DataGridTemplateColumn TData="CourseDto" Title="Status" IsSortable="true" SortBy="cc => cc.Status">
                            <CourseStatusChip Status="@context.Status"/>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn TData="CourseDto" Title="Last Modified" IsSortable="true" SortBy="cc => cc.LastModifiedAt">
                            <DateTimeText Value="@context.LastModifiedAt"
                                          SecondaryText="@context.LastModifiedBy"/>
                        </DataGridTemplateColumn>
                    </Columns>
                </DataGrid>
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>


@code {
    
    [Inject] public ICourseService CourseService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    private IEnumerable<CourseDto> _courses = new List<CourseDto>();
    private bool _isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _courses = await CourseService.GetCoursesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

}