@page "/Students"
@using Microsoft.AspNetCore.Authorization
@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Students
@using RCMS.Web.Services.Contracts
@using RCMS.Web.Components.Chips
@using RCMS.Web.Components.Texts
@using RCMS.Web.Components.Tables

@attribute [Authorize(Roles = nameof(UserRole.Admin))]

<PageContent Title="Students" Description="List of students stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_students"
                          IsLoading="_isLoading">
                    <DataGridPropertyColumn TData="StudentLiteDto" Title="Name" Property="s => s.Name" />
                    <DataGridPropertyColumn TData="StudentLiteDto" Title="Name" Property="s => s.PhoneNumber" />
                    <DataGridPropertyColumn TData="StudentLiteDto" Title="Name" Property="s => s.EmailAddress" />
                    <DataGridPropertyColumn TData="StudentLiteDto" Title="Name" Property="s => s.NoOfOngoingEnrollments.ToString()" />
                    <DataGridTemplateColumn TData="StudentLiteDto" Title="Status" IsSortable="true" SortBy="s => s.Status">
                        <StudentStatusChip Status="@context.Status"/>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn TData="StudentLiteDto" Title="Status" IsSortable="true" SortBy="s => s.LastModifiedAt">
                        <DateTimeText Value="@context.LastModifiedAt" 
                                      SecondaryText="@context.LastModifiedBy" />
                    </DataGridTemplateColumn>
                </DataGrid>
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>

@code {
    
    [Inject] public IStudentService StudentService { get; set; }

    private IEnumerable<StudentLiteDto> _students = new List<StudentLiteDto>();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        
        _students = await StudentService.GetStudentsAsync();
        
        _isLoading = false;
    }
}