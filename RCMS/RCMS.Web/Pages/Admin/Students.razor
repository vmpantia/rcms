@page "/students"
@using Microsoft.AspNetCore.Authorization
@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Students
@using RCMS.Web.Components.Chips
@using RCMS.Web.Components.Texts
@using RCMS.Web.Components.Tables
@using RCMS.Web.Components.Controls
@using RCMS.Web.Components.Dialogs
@using RCMS.Web.Interfaces.Helpers
@using RCMS.Web.Interfaces.Services

@attribute [Authorize(Roles = nameof(UserRole.Admin))]

<PageContent Title="Students" Description="List of students stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_students"
                          SelectedItems="_selectedStudents"
                          IsLoading="_isLoading"
                          IsMultipleSelection="true">
                    <Toolbar>
                        <IconButton Icon="@Icons.Material.Filled.PersonAdd"
                                    Text="Create Student"
                                    OnButtonClick="() => OpenSaveStudentDialog()"/>
                        <IconButton Icon="@Icons.Material.Filled.Delete"
                                    Text="Delete Student(s)"
                                    IsDisabled="@(!_selectedStudents.Any())"
                                    OnButtonClick="DeleteStudentsAsync"/>
                    </Toolbar>
                    <Columns>
                        <DataGridPropertyColumn TData="StudentLiteDto" Title="Name" Property="s => s.Name"/>
                        <DataGridPropertyColumn TData="StudentLiteDto" Title="Phone Number" Property="s => s.PhoneNumber"/>
                        <DataGridPropertyColumn TData="StudentLiteDto" Title="Email Address" Property="s => s.EmailAddress"/>
                        <DataGridTemplateColumn TData="StudentLiteDto" Title="Status" IsSortable="true" SortBy="s => s.Status">
                            <StudentStatusChip Status="@context.Status"/>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn TData="StudentLiteDto" Title="Last Modified" IsSortable="true" SortBy="s => s.LastModifiedAt">
                            <DateTimeText Value="@context.LastModifiedAt"
                                          SecondaryText="@context.LastModifiedBy"/>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn TData="StudentLiteDto" Title="Action">
                            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz">
                                <MudMenuItem Label="Edit" OnClick="() => OpenSaveStudentDialog(context)"/>
                                <MudMenuItem Label="Delete" OnClick="() => DeleteStudentAsync(context)"/>
                            </MudMenu>
                        </DataGridTemplateColumn>
                    </Columns>
                </DataGrid>
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>

@code {
    
    [Inject] public IStudentService StudentService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    [Inject] public IDialogHelper DialogHelper { get; set; }

    private IEnumerable<StudentLiteDto> _students = new List<StudentLiteDto>();
    private HashSet<StudentLiteDto> _selectedStudents = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _selectedStudents = new();
            _students = await StudentService.GetStudentsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
 
    private async Task OpenSaveStudentDialog(StudentLiteDto? dto = null)
    {
        var title = dto is null ? "Create Student" : "Update Student";
        var parameters = new DialogParameters<SaveStudentDialog> { { ssd => ssd.StudentId, dto?.Id } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        
        // Handle dialog result
        var result = await DialogHelper.ShowDialogAsync<SaveStudentDialog>(title, parameters, options);
        if (result)
        {
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    private async Task DeleteStudentAsync(StudentLiteDto dto)
    {
        try
        {
            var isConfirmed = await DialogHelper.ShowMessageDialogAsync(
                "Confirm Deletion", 
                "Are you sure you want to delete this student?",
                "Delete",
                Color.Error);
            if (isConfirmed)
            {
                StateHasChanged();
            
                await StudentService.DeleteStudentAsync(dto.Id);
                await OnInitializedAsync();
            
                // Alert user for success request and close dialog
                Snackbar.Add("Student deleted successfully.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task DeleteStudentsAsync()
    {
        try
        {
            var isConfirmed = await DialogHelper.ShowMessageDialogAsync(
                "Confirm Deletion", 
                $"Are you sure you want to delete this {_selectedStudents.Count} student(s)?",
                "Delete",
                Color.Error);
            if (isConfirmed)
            {
                StateHasChanged();

                var request = new DeleteStudentsDto { Ids = _selectedStudents.Select(ss => ss.Id) };
                await StudentService.DeleteStudentsAsync(request);
                await OnInitializedAsync();
            
                // Alert user for success request and close dialog
                Snackbar.Add("Students deleted successfully.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}