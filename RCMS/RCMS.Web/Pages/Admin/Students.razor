@page "/Students"
@using Microsoft.AspNetCore.Authorization
@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Students
@using RCMS.Web.Services.Contracts
@using RCMS.Web.Components.Chips
@using RCMS.Web.Components.Texts
@using RCMS.Web.Models

@attribute [Authorize(Roles = nameof(UserRole.Admin))]

<PageContent Title="Students" Description="List of students stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_students" 
                          Columns="_columns" 
                          IsLoading="_isLoading" />
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>

@code {
    
    [Inject] public IStudentService StudentService { get; set; }

    private IEnumerable<StudentLiteDto> _students = new List<StudentLiteDto>();
    private readonly IEnumerable<DataGridColumn<StudentLiteDto>> _columns = new List<DataGridColumn<StudentLiteDto>>
    {
        DataGridColumn<StudentLiteDto>.CreatePropertyColumn("Name", s => s.Name),
        DataGridColumn<StudentLiteDto>.CreatePropertyColumn("Phone Number", s => s.PhoneNumber),
        DataGridColumn<StudentLiteDto>.CreatePropertyColumn("Email", s => s.EmailAddress),
        DataGridColumn<StudentLiteDto>.CreatePropertyColumn("No. of Ongoing Enrollments", s => s.NoOfOngoingEnrollments.ToString()),
        DataGridColumn<StudentLiteDto>.CreateTemplateColumn("Status", s => @<StudentStatusChip Status="@s.Status" />, s => s.Status),
        DataGridColumn<StudentLiteDto>.CreateTemplateColumn("Last Modified", s => @<DateTimeText Value="@s.LastModifiedAt" SecondaryText="@s.LastModifiedBy" />, s => s.LastModifiedAt)
    };
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        
        _students = await StudentService.GetStudentsAsync();
        
        _isLoading = false;
    }
}