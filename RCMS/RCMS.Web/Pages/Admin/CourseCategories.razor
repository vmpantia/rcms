@page "/courses/categories"
@using Microsoft.AspNetCore.Authorization
@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Courses
@using RCMS.Web.Interfaces.Services
@using RCMS.Web.Components.Tables
@using RCMS.Web.Components.Texts
@using RCMS.Web.Components.Chips
@using RCMS.Web.Components.Controls
@using RCMS.Web.Models

@attribute [Authorize(Roles = nameof(UserRole.Admin))]

<PageContent Title="Categories" Description="List of categories stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_categories"
                          IsLoading="_isLoading">
                    <Toolbar>
                        <MudSpacer />
                        <IconButton Icon="@Icons.Material.Filled.FilterAlt"
                                    Text="Filter Categories"
                                    OnButtonClick="@(() => _isShowFilter = !_isShowFilter)"/>
                    </Toolbar>
                    <Columns>
                        <DataGridPropertyColumn TData="CourseCategoryDto" Title="Name" Property="cc => cc.Name"/>
                        <DataGridPropertyColumn TData="CourseCategoryDto" Title="Description" Property="cc => cc.Description"/>
                        <DataGridTemplateColumn TData="CourseCategoryDto" Title="Status" IsSortable="true" SortBy="cc => cc.Status">
                            <CourseCategoryStatusChip Status="@context.Status"/>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn TData="CourseCategoryDto" Title="Last Modified" IsSortable="true" SortBy="cc => cc.LastModifiedAt">
                            <DateTimeText Value="@context.LastModifiedAt"
                                          SecondaryText="@context.LastModifiedBy"/>
                        </DataGridTemplateColumn>
                    </Columns>
                </DataGrid>
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>

<FilterDrawer Title="Filter Categories" @bind-Open="@_isShowFilter">
    <MudGrid>
        <MudItem xs="12">
            <TextField Label="Name"
                       @bind-Value="_filter.Name"
                       HelperText="Filter by Category Name"/>
        </MudItem>
        <MudItem xs="12">
            <SelectField Label="Status"
                         @bind-SelectedValues="_filter.Statuses"
                         IsMultipleSelection="true"
                         Options="@(Enum.GetValues<CourseCategoryStatus>().Select(gt => new SelectFieldOption(gt.ToString())))"
                         HelperText="Filter by Category Statuses"/>
        </MudItem>
        <MudItem xs="12">
            <Button Text="Apply" OnButtonClick="FilterCourseCategoriesAsync"></Button>
        </MudItem>
    </MudGrid>
</FilterDrawer>

@code {
    
    [Inject] public ICourseService CourseService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    
    private FilterCourseCategory _filter = new();
    private IEnumerable<CourseCategoryDto> _categories = new List<CourseCategoryDto>();
    private bool _isLoading = true;
    private bool _isShowFilter = false;

    protected override async Task OnInitializedAsync()
    {
        await FilterCourseCategoriesAsync();
    }

    private async Task FilterCourseCategoriesAsync()
    {
        try
        {
            _isLoading = true;
            _categories = await CourseService.GetCourseCategoriesAsync(_filter);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

}