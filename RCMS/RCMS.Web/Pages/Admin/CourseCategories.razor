@page "/courses/categories"
@using Microsoft.AspNetCore.Authorization
@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Courses
@using RCMS.Web.Interfaces.Services
@using RCMS.Web.Components.Tables
@using RCMS.Web.Components.Texts
@using RCMS.Web.Components.Chips

@attribute [Authorize(Roles = nameof(UserRole.Admin))]

<PageContent Title="Categories" Description="List of categories stored on our database.">
    <ChildComponent>
        <MudGrid>
            <MudItem xs="12">
                <DataGrid Items="_categories"
                          IsLoading="_isLoading">
                    <Columns>
                        <DataGridPropertyColumn TData="CourseCategoryDto" Title="Name" Property="cc => cc.Name"/>
                        <DataGridPropertyColumn TData="CourseCategoryDto" Title="Description" Property="cc => cc.Description"/>
                        <DataGridTemplateColumn TData="CourseCategoryDto" Title="Status" IsSortable="true" SortBy="cc => cc.Status">
                            <CourseCategoryStatusChip Status="@context.Status"/>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn TData="CourseCategoryDto" Title="Last Modified" IsSortable="true" SortBy="cc => cc.LastModifiedAt">
                            <DateTimeText Value="@context.LastModifiedAt"
                                          SecondaryText="@context.LastModifiedBy"/>
                        </DataGridTemplateColumn>
                    </Columns>
                </DataGrid>
            </MudItem>
        </MudGrid>
    </ChildComponent>
</PageContent>

@code {
    
    [Inject] public ICourseService CourseService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    
    private FilterCourseCategory _filter = new();
    private IEnumerable<CourseCategoryDto> _categories = new List<CourseCategoryDto>();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _categories = await CourseService.GetCourseCategoriesAsync(_filter);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

}