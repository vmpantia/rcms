@page "/login"
@using RCMS.Shared.Models.Users
@using RCMS.Web.Components.Validations
@using RCMS.Web.Services.Contracts
@using RCMS.Web.Components.Controls

@layout EmptyLayout

<MudThemeProvider />
<MudSnackbarProvider />

<MudContainer MaxWidth="MaxWidth.Small" Style="height: 100%;">
    <MudPaper Class="px-10 py-20 mt-20">
        <EditForm Model="_login" OnValidSubmit="HandleLoginAsync">
            <FluentValidationValidator T="LoginUserDto" />
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Style="font-weight: bold;">Login to RCMS</MudText>
                </MudItem>
                @if (HasError)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">
                            @_errorMessage
                        </MudAlert>
                    </MudItem>
                }
                <MudItem xs="12">
                    <TextField Label="Username or Email"
                               @bind-Value="_login.UsernameOrEmailAddress" For="@(() => _login.UsernameOrEmailAddress)"
                               Disabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <TextField Label="Password"
                               @bind-Value="_login.Password" For="@(() => _login.Password)"
                               InputType="@_passwordInputType"
                               Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ShowOrHidePassword" AdornmentAriaLabel="Show Password"
                               Disabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                               FullWidth="true"
                               Disabled="IsFieldsDisabled">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [Inject] public IAuthService AuthService { get; set; }
    
    private LoginUserDto _login = new();
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;
    
    private bool _isShowPassword = false;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool HasError => !string.IsNullOrEmpty(_errorMessage);
    private bool IsFieldsDisabled => _isLoading;

    private async Task HandleLoginAsync()
    {
        try
        {
            _isLoading = true;
            await AuthService.LoginAsync(_login);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowOrHidePassword()
    {
        _isShowPassword = !_isShowPassword;
        _passwordInputIcon = _isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        _passwordInputType = _isShowPassword ? InputType.Text : InputType.Password;
    }
}