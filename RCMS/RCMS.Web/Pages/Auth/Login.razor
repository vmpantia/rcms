@page "/login"
@using RCMS.Shared.Models.Users
@using RCMS.Web.Components.Validations
@using RCMS.Web.Services.Contracts
@using RCMS.Web.Components.Controls

@layout EmptyLayout

<MudThemeProvider />
<MudSnackbarProvider />

<MudContainer MaxWidth="MaxWidth.Small" Style="height: 100%;">
    <MudPaper Class="px-10 py-20 mt-20">
        <EditForm Model="_login" OnValidSubmit="HandleLoginAsync">
            <FluentValidationValidator T="LoginUserDto" />
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Style="font-weight: bold;">Login to RCMS</MudText>
                </MudItem>
                @if (HasError)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">
                            @_errorMessage
                        </MudAlert>
                    </MudItem>
                }
                <MudItem xs="12">
                    <TextField Label="Username or Email"
                               @bind-Value="_login.UsernameOrEmailAddress"
                               For="@(() => _login.UsernameOrEmailAddress)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <PasswordField Label="Password"
                                   @bind-Value="_login.Password" 
                                   For="@(() => _login.Password)"
                                   IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <Button Type="ButtonType.Submit" 
                            IsDisabled="IsFieldsDisabled" 
                            IsLoading="_isLoading" 
                            Text="Login"
                            LoadingText="Processing"></Button>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [Inject] public IAuthService AuthService { get; set; }
    
    private LoginUserDto _login = new();
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;

    private bool HasError => !string.IsNullOrEmpty(_errorMessage);
    private bool IsFieldsDisabled => _isLoading;

    private async Task HandleLoginAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;
            await AuthService.LoginAsync(_login);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }
}