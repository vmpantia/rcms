@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Students
@using RCMS.Web.Components.Validations
@using RCMS.Web.Services.Contracts
@using RCMS.Web.Components.Controls

<MudDialog>
    <DialogContent>
        <EditForm Model="_student" OnValidSubmit="HandleCreateStudentAsync">
            <FluentValidationValidator T="CreateStudentDto" />
            <MudGrid Class="mb-5">
                @if (HasError)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">
                            @((MarkupString)_errorMessage)
                        </MudAlert>
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudText Typo="Typo.button">Personal Information</MudText>
                </MudItem>
                <MudItem xs="4">
                    <TextField Label="First Name"
                               @bind-Value="_student.FirstName"
                               For="@(() => _student.FirstName)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="4">
                    <TextField Label="Middle Name"
                               @bind-Value="_student.MiddleName"
                               For="@(() => _student.MiddleName)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="4">
                    <TextField Label="Last Name"
                               @bind-Value="_student.LastName"
                               For="@(() => _student.LastName)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="6">
                    <SelectField Label="Gender"
                                 @bind-Value="_student.Gender"
                                 For="@(() => _student.Gender)"
                                 IsDisabled="IsFieldsDisabled"
                                 Options="@(Enum.GetValues<GenderType>().Select(gt => gt.ToString()))"/>
                </MudItem>
                <MudItem xs="6">
                    <DateTimeField Label="Birthdate"
                                   @bind-Date="_student.BirthDate"
                                   For="@(() => _student.BirthDate)"
                                   IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.button">Contact Information</MudText>
                </MudItem>
                <MudItem xs="6">
                    <TextField Label="Phone Number"
                               @bind-Value="_student.PhoneNumber"
                               For="@(() => _student.PhoneNumber)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem xs="6">
                    <TextField Label="Email Address"
                               @bind-Value="_student.EmailAddress"
                               For="@(() => _student.EmailAddress)"
                               IsDisabled="IsFieldsDisabled"/>
                </MudItem>
                <MudItem Class="mt-2" xs="12">
                    <Button Type="ButtonType.Submit" 
                            IsDisabled="IsFieldsDisabled" 
                            IsLoading="_isCreating" 
                            Text="Create"
                            LoadingText="Creating"></Button>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Inject] public IStudentService StudentService { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    
    private CreateStudentDto _student = new ();
    private bool _isCreating = false;
    private string _errorMessage = string.Empty;
    
    private bool HasError => !string.IsNullOrEmpty(_errorMessage);
    private bool IsFieldsDisabled => _isCreating;

    private async Task HandleCreateStudentAsync()
    {
        try
        {
            _errorMessage = string.Empty;
            _isCreating = true;
            
            await StudentService.CreateStudentAsync(_student);
            
            // Alert user for success request and close dialog
            Snackbar.Add("Student created successfully.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isCreating = false;
        }
    }
}