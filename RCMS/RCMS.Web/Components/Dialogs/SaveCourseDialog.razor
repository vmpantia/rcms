@using RCMS.Shared.Enumerations
@using RCMS.Shared.Models.Courses
@using RCMS.Web.Components.Forms
@using RCMS.Web.Components.Controls
@using RCMS.Web.Interfaces.Helpers
@using RCMS.Web.Interfaces.Services
@using RCMS.Web.Models

<MudDialog>
    <DialogContent>
        <InputForm TData="SaveCourseDto"
                   Data="_course"
                   ErrorMessage="@_errorMessage"
                   IsLoading="_isLoading"
                   OnSubmitButtonClick="SaveCourseAsync">
            <FieldContent>
                <MudItem xs="12">
                    <TextField Label="Name"
                               @bind-Value="_course.Name"
                               For="@(() => _course.Name)"
                               IsDisabled="IsFormDisabled"/>
                </MudItem>
                <MudItem xs="12">
                    <SelectField Label="Category"
                                 @bind-Value="_course.CategoryId"
                                 For="@(() => _course.CategoryId)"
                                 IsDisabled="IsFormDisabled"
                                 Options="@_categories.Select(ccd => new SelectFieldOption(ccd.Id.ToString(), ccd.Name))"/>
                </MudItem>
                <MudItem xs="12">
                    <TextEditor @ref="_textEditor"
                                Label="Description" 
                                IsDisabled="IsFormDisabled"/>
                </MudItem>
                <MudItem Class="mt-2" xs="12">
                    <Button Type="ButtonType.Submit" 
                            IsDisabled="IsFormDisabled" 
                            IsLoading="_isSubmitting" 
                            Text="Submit"
                            LoadingText="Submitting"></Button>
                </MudItem>
            </FieldContent>
        </InputForm>
    </DialogContent>
</MudDialog>

@code {
    
    [Inject] public ICourseService CourseService { get; set; }
    [Inject] public IDialogHelper DialogHelper { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; }
    
    [Parameter] public Guid? CourseId { get; set; }

    private bool IsFormDisabled => _isSubmitting || _isInvalidData;

    private TextEditor _textEditor;
    private SaveCourseDto _course = new();
    private IEnumerable<CourseCategoryDto> _categories = new List<CourseCategoryDto>();
    private string _errorMessage;
    private bool _isLoading;
    private bool _isSubmitting;
    private bool _isInvalidData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _isInvalidData = false;

            // Filter active course categories
            _categories = await CourseService.GetCourseCategoriesAsync(
                new FilterCourseCategory { Statuses = [nameof(CourseCategoryStatus.Active)] }
            );
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isInvalidData = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SaveCourseAsync()
    {
        // Get and set description from HTML content
        _course.Description = await _textEditor.GetEditorContentAsync();
        
        if (CourseId.HasValue)
        {
            await HandleCourseActionAsync("Confirm Creation", 
                "Are you sure you want to update this course?", 
                () => CourseService.UpdateCourseAsync((Guid)CourseId, _course), 
                "Course updated successfully.");
        }
        else
        {
            await HandleCourseActionAsync("Confirm Creation", 
                "Are you sure you want to create this course?", 
                () => CourseService.CreateCourseAsync(_course), 
                "Course created successfully.");
        }
    }
    
    private async Task HandleCourseActionAsync(string confirmTitle, string confirmMessage, Func<Task> action, string successMessage)
    {
        try
        {
            var isConfirmed = await DialogHelper.ShowMessageDialogAsync(confirmTitle, confirmMessage);
            if (!isConfirmed) return;

            StateHasChanged();
            _errorMessage = string.Empty;
            _isSubmitting = true;

            await action.Invoke();

            Snackbar.Add(successMessage, Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isSubmitting = false;
        }
    }

}