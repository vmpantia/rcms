@using RCMS.Shared.Models.Instructors
@using RCMS.Web.Components.Forms
@using RCMS.Web.Interfaces.Helpers
@using RCMS.Web.Interfaces.Services

<MudDialog>
    <DialogContent>
        <InstructorForm TInstructor="UpdateInstructorDto"
                        Instructor="@_instructor" 
                        ErrorMessage="@_errorMessage"
                        IsLoading="_isLoading"
                        IsSubmitting="_isUpdating"
                        IsDisabled="_isInvalidData"
                        OnSubmitButtonClick="UpdateInstructorAsync"/>
    </DialogContent>
</MudDialog>

@code {
    
    [Inject] public IInstructorService InstructorService { get; set; }
    [Inject] public IDialogHelper DialogHelper { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid InstructorId { get; set; }
    
    private UpdateInstructorDto _instructor = new();
    private bool _isUpdating;
    private bool _isLoading;
    private bool _isInvalidData;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _isInvalidData = false;
            
            // Get instructor to update
            var instructor = await InstructorService.GetInstructorByIdAsync(InstructorId);

            // Map instructor to a instructor update model
            _instructor = new UpdateInstructorDto
            {
                FirstName = instructor.FirstName,
                MiddleName = instructor.MiddleName,
                LastName = instructor.LastName,
                Gender = instructor.Gender.ToString(),
                BirthDate = instructor.BirthDate,
                PhoneNumber = instructor.PhoneNumber,
                EmailAddress = instructor.EmailAddress,
            };
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isInvalidData = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task UpdateInstructorAsync()
    {
        try
        {
            var isConfirmed = await DialogHelper.ShowMessageDialogAsync("Confirm Update", "Are you sure you want to update this instructor?");
            if (isConfirmed)
            {
                StateHasChanged();
                _errorMessage = string.Empty;
                _isUpdating = true;

                await InstructorService.UpdateInstructorAsync(InstructorId, _instructor);

                // Alert user for success request and close dialog
                Snackbar.Add("Instructor updated successfully.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isUpdating = false;
        }
    }
}