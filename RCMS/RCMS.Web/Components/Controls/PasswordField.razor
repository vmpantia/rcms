@using System.Linq.Expressions

@typeparam T

<MudTextField Label="@Label" Placeholder="@Placeholder" Value="@Value" ValueChanged="@ValueChanged" 
              For="@For" Disabled="@IsDisabled" Variant="Variant.Outlined" Margin="Margin.Dense" 
              InputType="@_inputType" Adornment="Adornment.End"
              AdornmentIcon="@_adornmentIcon" AdornmentAriaLabel="@_adornmentAriaLabel"
              HelperText="@HelperText"
              OnAdornmentClick="ShowOrHidePassword" />

@code {
    
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public T Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public Expression<Func<T>> For { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public string HelperText { get; set; }
    
    private bool _isShowPassword = false;
    private InputType _inputType = InputType.Password;
    private string _adornmentIcon = Icons.Material.Filled.VisibilityOff;
    private string _adornmentAriaLabel = Icons.Material.Filled.VisibilityOff;
    
    private void ShowOrHidePassword()
    {
        _isShowPassword = !_isShowPassword;
        _inputType = _isShowPassword ? InputType.Text : InputType.Password;
        _adornmentIcon = _isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        _adornmentAriaLabel = _isShowPassword ? "Show Password" : "Hide Password";
    }
}